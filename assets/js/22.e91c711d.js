(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{483:function(v,_,t){"use strict";t.r(_);var n=t(2),r=Object(n.a)({},(function(){var v=this,_=v.$createElement,t=v._self._c||_;return t("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"custom-block-title"},[v._v("이 글은")]),v._v(" "),t("p",[t("a",{attrs:{href:"http://acornpub.co.kr/book/concurrency-in-go",target:"_blank",rel:"noopener noreferrer"}},[v._v("Concurrency in Go - Go 동시성 프로그램"),t("OutboundLink")],1),v._v("\n스터디에 참여하면서 2장 "),t("code",[v._v("코드 모델링: 순차적인 프로세스 간의 통신")]),v._v("을 요약 정리한\n내용입니다.")])]),v._v(" "),t("h2",{attrs:{id:"동시성과-병렬성의-차이"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#동시성과-병렬성의-차이"}},[v._v("#")]),v._v(" 동시성과 병렬성의 차이")]),v._v(" "),t("p",[t("strong",[v._v("다른 것과 동시에 실행되는 것")]),v._v("을 표현할 때 종종 동시성과 병렬성을 섞어서\n사용하는데,"),t("br"),v._v('\n코드에 대해 토론하는 경우라면 일반적으로 "동시"라는 단어를 사용해야\n한다.')]),v._v(" "),t("p",[v._v("코드를 모델링할 때 동시성과 병렬성의 차이는 객체의 추상화에 큰 영향을 미치는\n것으로 밝혀졌으며, Go는 이를 최대한 활용한다.")]),v._v(" "),t("blockquote",[t("p",[v._v("동시성은 코드의 속성이고, 병렬 처리는 실행 중인 프로그램의 속성이다.")])]),v._v(" "),t("p",[v._v("병렬로 실행하려는 의도로 작성한 코드가 "),t("strong",[v._v("실제로 그렇게 되리라는 보장이 있는가?")]),t("br"),v._v("\n코어가 하나뿐인 기기에서 해당 코드를 실행하면 어떻게 되는가? 실제로 병렬적으로\n실행되리라 생각할 수 있지만 그렇지 않다."),t("br"),v._v("\n실제로는 구분할 수 없을 정도로 빠르게 순차적으로 실행된다.")]),v._v(" "),t("p",[v._v("여기서 몇가지 중요한 사실은")]),v._v(" "),t("ol",[t("li",[v._v("우리는 병렬적인 코드를 작성하는 것이 아나라, "),t("strong",[v._v("병렬로 실행되기를 바라면서")]),v._v("\n동시성 코드를 작성하는 것")]),v._v(" "),t("li",[v._v("동시성 코드가 "),t("strong",[v._v("실제로 병렬로 실행되는지 여부를 모를 수")]),v._v("도 있다."),t("br"),v._v("\n프로그램의 런타임, 운영체제, 컨테어너, 가상머신과 같은 운영체제가 실행되는\n플랫폼,"),t("br"),v._v("\n그리고 최종적으로 CPU와 같은 추상화 계층들을 통해서만 코드가 병렬로 실행되는\n확인할 수 있다.")]),v._v(" "),t("li",[v._v("병렬 처리인지 아닌지는 "),t("strong",[v._v("시간, 또는 컨텍스트")]),v._v("에 의해 결정된다."),t("br"),v._v("\n여기서 컨텐스트는 1장의 원자성이 아닌 두 개 이상의 연산이 병렬적으로 실행됐다고\n여길 수 있는 범위로 정의")])]),v._v(" "),t("p",[v._v("이 범위는"),t("br"),v._v("\n시분할 관점"),t("br"),v._v("\n프로그램이 실행되는 프로세스"),t("br"),v._v("\n해당 프로세스의 운영체제 스레드"),t("br"),v._v("\n프로세스가 동작하는 장비 등으로 정의할 수 있고,"),t("br"),v._v("\n컨텍스트의 정의는 동시성과 정확성의 개념과 밀접하게 관련된다."),t("br"),v._v("\n이게 "),t("strong",[v._v("컨텍스트 정의가 중요한 이유")]),v._v("다."),t("br"),v._v("\n동시에 수행되는 작업은 정의된 컨텍스트에서만 정확하다. 이것은 "),t("strong",[v._v("모두\n상대적")]),v._v("이다.")]),v._v(" "),t("ul",[t("li",[v._v("장비"),t("br"),v._v("\n두 대의 장비에서 각각 실행되는 계산기는 다른장비에서 실행되는 프로세스의 로직에\n영향을 미치지 않을것이라 기대할 수 있다.")]),v._v(" "),t("li",[v._v("프로세스"),t("br"),v._v("\n한 장비의 두 개의 프로세스는 서로 영향을 주지 않을 것이라고 예상되지만,"),t("br"),v._v("\n정말 서로의 논리에 영향을 주지 않을까?"),t("br"),v._v("\n프로세스 A가 사용하는 파일을 B가 덮어쓸 수도 있고, 메모리를 침범할 수도 있다."),t("br"),v._v("\n다행히도 프로세스 경계와 운영체제는 논리적인 방식으로 동시성 문제들을 생각하는\n데 도움이 된다.")]),v._v(" "),t("li",[v._v("OS 스레드"),t("br"),v._v("\n1장에서 이야기한 레이스 컨디션, 데드락, 라이브락, 기아상태와 같은 모든 문재가\n발생")])]),v._v(" "),t("p",[v._v("추상화의 단계가 진행될수록 무언가를 동시적으로 모델링하는 문제는 "),t("strong",[v._v("더욱 추론하기\n어려워지고 중요")]),v._v("해짐"),t("br"),v._v("\n거꾸로 동시적으로 모델링이 어려워질수록 추상화는 더욱 더 중요해진다."),t("br"),v._v("\n하지만 우리업계 대부분의 동시성 논리는 가장 높은 추상화 수준인 OS 스레드에서\n작성되어있고, 시스템이 많은 스레드를 처리할 수 없는 경우에는 스레드 풀"),t("sup",[v._v("thread")]),v._v(" "),t("sup",[v._v("pool")]),v._v("을 만들고 스레드 풀에 작업을 다중화해야 했다."),t("br"),v._v(" "),t("a",{attrs:{href:"https://www.educative.io/courses/java-multithreading-for-senior-engineering-interviews/m2G48X18NDO",target:"_blank",rel:"noopener noreferrer"}},[v._v("thread 이미지"),t("OutboundLink")],1)]),v._v(" "),t("p",[v._v("Go는 CSP에서 몇가지 개념을 채용하여 채널"),t("sup",[v._v("channel")]),v._v("을 사용하는 새로운 기본요소를\n도입하였고"),t("br"),v._v("\n스레드는 여전히 존재하지만 "),t("strong",[v._v("고루틴과 채널에서")]),v._v(" 모든 것을 모델링하며 "),t("strong",[v._v("메모리를\n공유")]),v._v("한다.")]),v._v(" "),t("h2",{attrs:{id:"csp란-무엇인가"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#csp란-무엇인가"}},[v._v("#")]),v._v(" CSP란 무엇인가?")]),v._v(" "),t("p",[v._v("CSP는 상호작용하는 순차적 프로세스들"),t("sup",[v._v("Communicating")]),v._v(" "),t("sup",[v._v("Sequential")]),v._v(" "),t("sup",[v._v("Processes")]),v._v("의 약자로"),t("br"),v._v("\n1978년 찰스 안토니 리차드 호어"),t("sup",[v._v("Chanrles")]),v._v(" "),t("sup",[v._v("Antony")]),v._v(" "),t("sup",[v._v("Richard")]),v._v(" "),t("sup",[v._v("Hoare")]),v._v("가 미국\n계산기 학회에서 논문을 발표했다."),t("br"),v._v('\n이 논문에서 호어는 "프로그래밍에서 두 가지 기본 요소인 입력 및 출력이 간과되고\n있으며, 특히 동시에 실행되는 코드의 경우에는 더욱 그렇다"'),t("br"),v._v("\n당시에는 goto 문법의 사용, 객체 지향 패러다임이 싹트기 시작했고 동시성 연산에\n대해서는 크게 고려하지 않았다."),t("br"),v._v("\n호어가 이를 바로잡기 시작하면서 그의 논문과 CSP가 탄생하였다.")]),v._v(" "),t("p",[v._v("호어는 CSP 프로그래밍 언어에 프로세스 간 입력 및 출력, 즉 "),t("strong",[v._v("통신을 정확하게\n모델링하기 위한 기본 요소들을 포함")]),v._v("시켰다."),t("br"),v._v("\n입력을 요구하고 다른 프로세스가 사용할 출력을 생산하는 로직의 캡슐화된 부분을\n"),t("strong",[v._v("프로세스")]),v._v("라고 지칭했다.")]),v._v(" "),t("blockquote",[t("p",[v._v("!: 프로세스에 입력을 보냄"),t("br"),v._v("\n?: 프로세스에 출력을 읽어 옴")])]),v._v(" "),t("table",[t("thead",[t("tr",[t("th",{staticStyle:{"text-align":"left"}},[v._v("연산")]),v._v(" "),t("th",{staticStyle:{"text-align":"left"}},[v._v("설명")])])]),v._v(" "),t("tbody",[t("tr",[t("td",{staticStyle:{"text-align":"left"}},[v._v("cardreader?cardimage")]),v._v(" "),t("td",{staticStyle:{"text-align":"left"}},[v._v("cardreader로부터 card를 읽어와서 "),t("br"),v._v("그 값(문자열) cardimage 변수에 할당")])]),v._v(" "),t("tr",[t("td",{staticStyle:{"text-align":"left"}},[v._v("linerprinter!lineimage")]),v._v(" "),t("td",{staticStyle:{"text-align":"left"}},[v._v("linerprinter에 출력을 위한 lineimage 값을 전송")])])])]),v._v(" "),t("p",[v._v("이러한 기본 요소를 사용해, 통신을 모델링하기 위한 일급"),t("sup",[v._v("first-class")]),v._v("지원이 문제를\n더 간단하고 이해하기 쉽게 해주고 있다.")]),v._v(" "),t("p",[v._v("인기있는 언어 대다수는 메모리에 대한 접근을 공유하고 동기화하는 방식을 선호한다."),t("br"),v._v("\n메모리 접근 동기화가 본질적으로 나쁜 것은 아니다. 그러나 공유 메모리 모델은 특히\n대규모 프로그램이나 복잡한 프로그램에서 올바르게 활용하기 어려울 수 있다.")]),v._v(" "),t("p",[v._v("동시성이 Go의 강점 중 하나로 간주되는 이유가 바로 이것이다."),t("br"),v._v("\n처음부터 CSP의 원칙을 염두에 두고 구축됐으므로 읽고 쓰기 쉽고, 추록하기 쉽다.")]),v._v(" "),t("p",[t("a",{attrs:{href:"http://arild.github.io/csp-presentation/#11",target:"_blank",rel:"noopener noreferrer"}},[v._v("프로세스간 채널을 사용한 통신 이미지"),t("OutboundLink")],1)]),v._v(" "),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"custom-block-title"},[v._v("first class citizen")]),v._v(" "),t("p",[v._v("함수에 전달되고, 함수로부터 반환되고, 변수에 할당될 수 있는 값")])]),v._v(" "),t("h2",{attrs:{id:"동시성을-지원하는-언어의-장점"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#동시성을-지원하는-언어의-장점"}},[v._v("#")]),v._v(" 동시성을 지원하는 언어의 장점")]),v._v(" "),t("p",[v._v("많은 언어는 보통 OS 스레드 및 메모리 접근 동기화 수준에서 언어의 추상화를\n끝내지만,"),t("br"),v._v("\nGo는 다른 방식을 사용해 고루틴 및 채널의 개념으로 이를 대체하는데 고루틴은\n스레드와, 채널은 뮤텍스와 비교할 수 있을 것이다.")]),v._v(" "),t("p",[v._v("병렬성을 고민할 필요 없이 동시성을 지원한다는 차이가 어떤 영향을 미치는지\n살펴보자.")]),v._v(" "),t("p",[v._v("웹 서버를 개발한다고 할 시 스레드 추상화를 위한 질문은 이럴 것이다.")]),v._v(" "),t("ol",[t("li",[v._v("언어가 자체적으로 스레드를 지원하는가? 아니면 라이브러리를 선택?")]),v._v(" "),t("li",[v._v("스레드의 제한 영역은 어디에 있어야 하는가?")]),v._v(" "),t("li",[v._v("이 운영체제의 스레드는 얼마나 무거운가?"),t("br"),v._v("\n...")])]),v._v(" "),t("p",[t("a",{attrs:{href:"https://github.com/code-review-checklists/java-concurrency",target:"_blank",rel:"noopener noreferrer"}},[v._v("스레드를 지원하는 자바에서 동시성 코드에 대한 체크리스트"),t("OutboundLink")],1)]),v._v(" "),t("p",[v._v("실질적인 문제 해결보다는 병령성 문제를 해결하기 위해 생각해야 할 것이 많다."),t("br"),v._v("\n해당 언어에서 병렬성과 관련하여 추상화할 수 있는 프레임워크가 존재한다고 해서,"),t("br"),v._v("\n코드의 복잡성이 숨겨져 있을 뿐 없어진 것이 아니다."),t("br"),v._v(" "),t("strong",[v._v("복잡성은 버그")]),v._v("를 낳는다.")]),v._v(" "),t("p",[v._v("Go에서라면 들어오는 연결마다 고루틴을 만들고, ....."),t("br"),v._v("\n이처럼 문제에 대해 자연스럽게 생각하고 코딩하는 방식으로 연결된다."),t("br"),v._v("\n몇 가지 이점도 생기는데 Go의 런타임은 고루틴을 OS 스레드에 자동으로 다중화하고\n스케줄링을 관리해준다."),t("br"),v._v("\n이것은 모델링한 방법을 변경하지 않고도 런타임 최적화할 수 있다는 것을 의미한다."),t("br"),v._v("\n이는 고전적인 관심사의 분리"),t("sup",[v._v("seperation")]),v._v(" "),t("sup",[v._v("of")]),v._v(" "),t("sup",[v._v("concerns")]),v._v("이다.(6장에서 계속)")]),v._v(" "),t("p",[v._v("또 다른 이점은 동시성 방식으로 모델링된 공간의 양이 늘어난다는 것."),t("br"),v._v("\n위의 웹 서버예제로 다시 들어가보면 프로그램은 자신의 호스트에서 허용하는 병렬성의\n양만큼 "),t("strong",[v._v("동적으로")]),v._v(" 확장될 수 있다.")]),v._v(" "),t("p",[v._v("이렇듯 CSP에서 영감을 얻은 기본요소들과 이를 지원하는 런타임의 화려한 조합이 Go에\n강력한 힘을 선사한다.")]),v._v(" "),t("h2",{attrs:{id:"go의-동시성에-대한-철학"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#go의-동시성에-대한-철학"}},[v._v("#")]),v._v(" Go의 동시성에 대한 철학")]),v._v(" "),t("p",[v._v("Go에서 CSP 스타일로만 동시성 코드를 작성할 수 있는 것은 아니다."),t("br"),v._v("\n메모리 접근 동기화를 비롯한 여러가지 전통적인 방법을 지원한다.")]),v._v(" "),t("p",[t("strong",[v._v("메모리 공유를 사용해 통신하지 마라. 대신 통신을 통해 메모리를 공유하라")]),t("br"),v._v("\n하지만 Go 팀에서는 CSP 스타일의 사용을 권하고 있다.")]),v._v(" "),t("p",[v._v("그러면 어느 방법을 사용해야 할까?")]),v._v(" "),t("img",{attrs:{src:"https://www.plantuml.com/plantuml/svg/VPBDQi9058NtUOgBEnSkZAaB5ssVeFj2Dq4736qIIUB2dJzJ5sAX2uD1J9j2BHHIY4qgMVX4cPjtQCQ_M97kXZFtVFVCOQvDIpQijleWD9K60QAsh0uqY5atb9Qbw9fWtYjQIpPa5LHTq-jDGrS9M4QR249cjGWKaZXWOGmuc-1m3DZtSVPP0Da4qoAj2u3zd5G4f4isMk2WXwu3-4AJa08wFPn-eHidGVVgu2ldld8Hs5E0RfJIOECRZd7k9QinkXJkDCXkqAEfxJ3lFGazuAVHv0zDp6bY4P8V7zy2_8uuZVKZjkf2bYaTpDbYpOaiZ58d_fTOoOcLx5rJdxtwa87OYcweZslsuUzmV9bdftQ4zleSIzgJS4aPVJwjiCgRvesKIfVRJcjmIynD01xah2mTopVwAKBaucvKFAYL8pNdIZaW7wtMe7DcsLOMX6kYDR9FzGi0",alt:"uml diagram"}}),v._v(" "),t("ol",[t("li",[v._v("데이터의 소유권을 이전하려고 하는가?"),t("br"),v._v("\n채널은 한번에 하나의 동시 컨텐스트만 데이터 소유권을 가져야 한다는 의도를\n채널의 타입에 인코딩함으로써 메모리 소유권 개념을 전달할 수 있게 도와준다."),t("br"),v._v("\n이 방식의 가장 큰 장점은 적은 비용으로 메모니 내부 큐"),t("sup",[v._v("in-memory")]),v._v(" "),t("sup",[v._v("queue")]),v._v("를\n위한 버퍼링된 채널을 생성하고, 이를 통해 생산자와 소비자를 분리할 수 있고,\n동시성 코드를 다른 동시성 코드와 함께 구성할 수 있다.")]),v._v(" "),t("li",[v._v("구조체의 내부 상태를 보호하고자 하는가?"),t("br"),v._v("\n메모리 접근 동기화 기본 요소를 사용할 수 있는 훌륭한 후보이자 채널을\n사용해서는 안된다는 강력한 지표"),t("br"),v._v("\n메모리 접근 동기화를 통해 호출자에게 임계영역을 잠그는 세부사항을 노출하지 않을\n수 있다.")]),v._v(" "),t("li",[v._v("여러 부분의 논리를 조정해야 하는가?"),t("br"),v._v("\n채널은 본질적으로 메모리 접근 동기화 기본 요소보다 더 쉽게 구성 가능하고\n복잡성을 쉽게 제어할 수 있다.")]),v._v(" "),t("li",[v._v("성능상의 임계 영역(performance-critical section)인가?"),t("br"),v._v("\n특정 영역이 다른 부분보다 느린 병목지점으로 밝혀지면 메모리 접근 동기화\n기본요소를 사용하자."),t("br"),v._v("\n채널이 동작할 때 메모리 접근 동기화를 사용하기 때문에 채널이 더 늘릴 수 있기\n때문이다.")])]),v._v(" "),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"custom-block-title"},[v._v("동시성에 대한 Go의 철학을 요약하면")]),v._v(" "),t("p",[v._v("단순화를 목표로 하고,"),t("br"),v._v("\n가능하면 채널을 사용하며,"),t("br"),v._v("\n고루틴을 무한정 쓸 수 있는 자원처럼 다루어라")])])])}),[],!1,null,null,null);_.default=r.exports}}]);